generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  lastName         String
  password         String
  passwordChengeAt DateTime @updatedAt
  role             Role
  photo            String
  isActive         Boolean  @default(true)
  tours            Tour[]   @relation("TourGuides") // relation to Tour model  
  reviews          Review[] @relation("UserReviews")
  orders           Order[]  @relation("UserOrder")
}

model Review {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  createdAt DateTime @default(now())
  userId    String
  tourId    String
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  tour      Tour     @relation("TourReviews", fields: [tourId], references: [id])

  @@unique([userId, tourId])
}

model Tour {
  id              String         @id @default(uuid())
  name            String         @unique @db.VarChar(40)
  reviews         Review[]       @relation("TourReviews")
  order           Order[]        @relation("TourOrder")
  slug            String?        @unique
  duration        Int
  maxGroupSize    Int
  difficulty      Difficulty
  ratingsAverage  Float          @default(4.5)
  ratingsQuantity Int            @default(0)
  price           Float
  priceDiscount   Float?
  summary         String         @db.Text
  description     String?        @db.Text
  imageCover      String
  images          String[]
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  startDates      DateTime[]
  secretTour      Boolean        @default(false)
  guides          User[]         @relation("TourGuides")
  startLocation   StartLocation?
  locations       Location[]
}

model StartLocation {
  id          String  @id @default(uuid())
  description String
  type        String
  coordinates Float[]
  address     String
  tourId      String  @unique
  tour        Tour    @relation(fields: [tourId], references: [id])
}

model Location {
  id          String  @id @default(uuid())
  tourId      String
  type        String  @default("Point") @db.VarChar(5)
  coordinates Float[]
  address     String?
  description String?
  day         Int?
  tour        Tour    @relation(fields: [tourId], references: [id])

  @@map("locations")
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  tourId     String
  finalPrice Int
  count      Int
  status     orderStatus @default(pending)
  user       User        @relation("UserOrder", fields: [userId], references: [id])
  tour       Tour        @relation("TourOrder", fields: [tourId], references: [id])
  payment    Payment?
  paymentId  String?     @unique

  @@unique([userId, tourId])
}

model Payment {
  id        String @id @default(uuid())
  code      Int
  ref_id    Int
  card_pan  String
  card_hash String
  fee_type  String
  fee       Int
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String @unique
}

enum Difficulty {
  easy
  medium
  difficult
}

enum orderStatus {
  pending
  paid
  canceled
}



enum Role {
  ADMIN
  USER
  TOURLEADER
  GUIDE
}
